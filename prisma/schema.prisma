// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}


// User table
model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  dateOfBirth   DateTime?
  phone         String?       @unique
  height        Float?
  weight        Float?
  dominantHand  String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now())
  hasOnBoarded  Boolean       @default(false)
  
  // Relationships
  accounts      Account[]
  sessions      Session[]
  teams         Team[]        @relation("TeamCreator")
  teamMembers   TeamMember[]
}

// Account table
model Account {
  id                        String     @id @default(cuid())
  userId                    String
  type                      String
  provider                  String
  providerAccountId         String
  refresh_token             String?
  access_token              String?
  expires_at                Int?
  token_type                String?
  scope                     String?
  id_token                  String?
  session_state             String?
  refresh_token_expires_in  Int?
  image                     String?

  // Relationships
  user      User            @relation(fields: [userId], references: [id])
  @@unique([provider, providerAccountId]) // <--- Add this line
  @@index([userId])
}

// Session table
model Session {
  id            String      @id @default(cuid())
  sessionToken  String      @unique
  userId        String
  expires       DateTime
  
  // Relationships
  user          User        @relation(fields: [userId], references: [id])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
// Team table
model Team {
  id         String      @id @default(cuid())
  name       String
  code       String      @unique
  image      String?
  creatorId  String
  createdAt  DateTime
  members    TeamMember[]
  activities Activity[]
  
  // Relationships
  creator    User          @relation("TeamCreator", fields: [creatorId], references: [id])
}

// TeamMember table
model TeamMember {
  id           String        @id @default(cuid())
  userId       String
  teamId       String
  role         String
  status       String
  number       String?
  position     String?

  statlines    Statline[]
  attendances  ActivityAttendance[]

//relationships
  user         User          @relation(fields: [userId], references: [id])
  team         Team          @relation(fields: [teamId], references: [id])
}

// Activity table
model Activity {
  id           String      @id @default(cuid())
  title        String
  time         String
  gameplan     String?
  type         String
  duration     Float?
  practiceType String?
  notes        String?
  date         DateTime
  createdAt    DateTime
  updatedAt    DateTime
  teamId       String

  attendees    ActivityAttendance[]
  statlines    Statline[]
  
  // Relationships
  team         Team          @relation(fields: [teamId], references: [id])
 
}

// Statline table
model Statline {
  id                  String      @id @default(cuid())
  teamMemberId        String
  fieldGoalsMade      Int
  fieldGoalsMissed    Int
  threePointersMade   Int
  threePointersMissed Int
  freeThrows          Int
  missedFreeThrows    Int
  assists             Int
  steals              Int
  turnovers           Int
  rebounds            Int
  blocks              Int
  createdAt           DateTime
  updatedAt           DateTime
  activityId          String
  
  // Relationships
  teamMember TeamMember  @relation(fields: [teamMemberId], references: [id])
  activity   Activity    @relation(fields: [activityId], references: [id])
}

model ActivityAttendance {
  id               String      @id @default(cuid())
  activityId       String
  teamMemberId     String       
  attendanceStatus String
  reason           String?
  attendedAt       DateTime?

  // Relationships
  activity     Activity      @relation(fields: [activityId], references: [id])
  teamMember   TeamMember    @relation(fields: [teamMemberId], references: [id])

@@unique([activityId, teamMemberId]) // Ensure unique attendance per activity and team member
  @@index([activityId])
  @@index([teamMemberId])
}
