// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}


// User table
model User {
  id          String      @id @default(dbgenerated("uuid_generate_v4()"))
  name        String?
  email       String?     @unique
  emailVerified DateTime?
  image       String?
  createdAt   DateTime    @default(now())
  
  // Relationships
  accounts     Account[]
  sessions     Session[]
  posts        Post[]
  teams        Team[]      @relation("TeamCreator")
  teamMembers  TeamMember[]
  statlines    Statline[]
  attendances  ActivityAttendance[]
}

// Account table
model Account {
  id                      String      @id @default(dbgenerated("uuid_generate_v4()"))
  userId                  String
  type                    String
  provider                String
  providerAccountId       String
  refresh_token           String?
  access_token            String?
  expires_at              Int?
  token_type              String?
  scope                   String?
  id_token                String?
  session_state           String?
  refresh_token_expires_in Int?
  
  // Relationships
  user      User          @relation(fields: [userId], references: [id])
}

// Session table
model Session {
  id            String      @id @default(dbgenerated("uuid_generate_v4()"))
  sessionToken  String      @unique
  userId        String
  expires       DateTime
  
  // Relationships
  user      User          @relation(fields: [userId], references: [id])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// Post table
model Post {
  id          Int         @id @default(autoincrement())
  name        String
  createdAt   DateTime
  updatedAt   DateTime
  createdById String
  
  // Relationships
  createdBy  User          @relation(fields: [createdById], references: [id])
}

// Team table
model Team {
  id         String      @id @default(dbgenerated("uuid_generate_v4()"))
  name       String
  code       String      @unique
  creatorId  String
  createdAt  DateTime
  
  // Relationships
  creator   User          @relation("TeamCreator", fields: [creatorId], references: [id])
  members   TeamMember[]
  activities Activity[]
}

// TeamMember table
model TeamMember {
  id         String      @id @default(dbgenerated("uuid_generate_v4()"))
  userId     String
  teamId     String
  role       String
  status     String
  
  // Relationships
  user      User          @relation(fields: [userId], references: [id])
  team      Team          @relation(fields: [teamId], references: [id])
}

// Activity table
model Activity {
  id           String      @id @default(dbgenerated("uuid_generate_v4()"))
  title        String
  time         String
  gameplan     String?
  type         String
  duration     Float?
  practiceType String?
  notes        String?
  date         DateTime
  createdAt    DateTime
  updatedAt    DateTime
  teamId       String
  
  // Relationships
  team       Team          @relation(fields: [teamId], references: [id])
  attendees  ActivityAttendance[]
  statlines  Statline[]
}

// Statline table
model Statline {
  id                 String      @id @default(dbgenerated("uuid_generate_v4()"))
  playerId           String
  fieldGoalsMade     Int
  fieldGoalsMissed   Int
  threePointersMade  Int
  threePointersMissed Int
  freeThrows         Int
  missedFreeThrows   Int
  assists            Int
  steals             Int
  turnovers          Int
  rebounds           Int
  blocks             Int
  createdAt          DateTime
  updatedAt          DateTime
  activityId         String
  
  // Relationships
  player    User          @relation(fields: [playerId], references: [id])
  activity  Activity      @relation(fields: [activityId], references: [id])
}

// ActivityAttendance table
model ActivityAttendance {
  id               String      @id @default(dbgenerated("uuid_generate_v4()"))
  activityId       String
  userId           String
  attendanceStatus String
  attendedAt       DateTime?
  
  // Relationships
  activity   Activity      @relation(fields: [activityId], references: [id])
  user       User          @relation(fields: [userId], references: [id])
}
